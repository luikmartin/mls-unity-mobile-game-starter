name: Run play and edit mode tests and generate coverage reports

on: [push, pull_request]

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  PLAY_MODE: playmode
  EDIT_MODE: editmode

jobs:
  checkLicense:
    name: Check for the Unity license üîé
    runs-on: ubuntu-latest
    steps:
      - name: Fail - No license ‚ò†Ô∏è
        if: ${{ !startsWith(env.UNITY_LICENSE, '<') }}
        run: exit 1

  testAllModes:
    name: Test in ${{ matrix.testMode }}
    needs: checkLicense
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - ${{ env.PLAY_MODE }}
          - ${{ env.EDIT_MODE }}

    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      # Cache unity Library folder from previous builds.
      - name: Restore Unity Library folder
        uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}
          restore-keys: |
            Library-

      - name: Run ${{ matrix.testMode }} tests
        uses: game-ci/unity-test-runner@v2
        id: tests
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          artifactsPath: ${{ matrix.testMode }}-artifacts
          # githubToken: ${{ secrets.GITHUB_TOKEN }}
          checkName: ${{ matrix.testMode }} Test Results
          coverageOptions: "generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+my.assembly.*"

      - name: Save Test Result Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}

  codeCoverage:
    # The type of runner that the job will run on
    needs: testAllModes
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - ${{ env.PLAY_MODE }}
          - ${{ env.EDIT_MODE }}

    steps:
      - name: Load Test Result Artifacts
        uses: actions/download-artifact@v2
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.tests.outputs.artifactsPath }}

      - shell: bash
        run: cat ./artifacts/CodeCoverage/Report/Summary.xml

      # Ensure code coverage exceeds required coverage.
      - name: Check Code Coverage
        uses: AnImaginedReality/UnityCodeCoverage.Action@v0.0.4
        with:
          required-coverage: 25
          coverage-file-path: ./artifacts/CodeCoverage/Report/Summary.xml
